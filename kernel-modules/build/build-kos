#!/usr/bin/env bash
#
#### LICENSING:
#### This file is derived from sysdig, in scripts/build-probe-binaries.
#### Sysdig is licensed under the GNU General Public License v2.
#### This file is not distributed with StackRox code, and is only
#### used during compilation.
#### This file is heavily modified from the original.
#
# This script builds a precompiled version of sysdig-probe for a bunch of kernels
# The precompiled binary is then obtained at runtime by sysdig-probe-loader
# Ideally, the community should expand this stuff with better support
#

set -euo pipefail
IFS=$'\n\t'

main() {
    local input_kernal_bundle="$1"
    local input_sysdig_bundle="$2"
    local output_dir="$3"

    local kernel_version="$(basename "$input_kernal_bundle" | sed 's|bundle-||' | sed 's|.tgz||')"
    local output_module="${output_dir}/collector-${kernel_version}.ko"

    local kernel_dir="$(mktemp -d)"
    local sysdig_dir="$(mktemp -d)"

    # Extract the kernel bundle.
    tar -C "$kernel_dir" -xf "$input_kernal_bundle"

    # Sanity check that a file named BUNDLE_BUILD_DIR was extracted from the
    # bundle archive.
    if [[ ! -f "${kernel_dir}/BUNDLE_BUILD_DIR" ]]; then
        echo "no BUNDLE_BUILD_DIR file inside of bundle archive"
        return 1
    fi

    # Build up the kernel directory for building.
    kernel_build_dir="$(cat "${kernel_dir}/BUNDLE_BUILD_DIR")"
    echo "kernel_build_dir is $kernel_build_dir"
    kernel_build_dir="$(cd "$kernel_dir" && cd "$kernel_build_dir" && pwd)"
    echo "kernel_build_dir is $kernel_build_dir"

    # Extract the sysdig bundle.
    tar -C "$sysdig_dir" -xf "$input_sysdig_bundle"

    # Perform the actual kernel module build.
    cd "$sysdig_dir"
    KERNELDIR="${kernel_build_dir}" make -j 6 all

    # Strip symbols from the build module.
    local sysdig_ko=collector.ko
    strip -g "$sysdig_ko"

    # Sanity check the kernel version. Verify that the version in the bundle
    # filename exactly matches the version given by the kernel module itself.
    local ko_version=$(/sbin/modinfo "$sysdig_ko" | grep vermagic | tr -s " " | cut -d " " -f 2)
    if [[ "$ko_version" != "$kernel_version" ]]; then
        echo "Corrupted probe: Expected '$kernel_version' but actual was '$ko_version'"
        return 1
    fi

    # Move kernel module into the correct location and compress.
    mv -f "$sysdig_ko" "$output_module"
    pigz -f -9 "$output_module"
}

main "$@"
