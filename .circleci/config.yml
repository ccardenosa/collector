version: 2

jobs:
  init:
    docker:
    - image: circleci/golang:1.11.2-stretch

    working_directory: ~/workspace

    steps:
    - run:
        name: Create Workspace
        working_directory: ~
        command: |
          mkdir -p workspace/go/src/github.com/stackrox/collector

    - checkout:
        path: ~/workspace/go/src/github.com/stackrox/collector

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector

  builder:
    machine: true
    steps:
    - run:
        name: Login to Docker Hub
        command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

    - attach_workspace:
        at: ~/workspace

    - run:
        name: Restore collector-builder cache image
        command: docker pull stackrox/collector-builder:cache || true

    - run:
        name: Build collector builder Docker image
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/builder
        command: |
          docker build \
            --cache-from stackrox/collector-builder:cache \
            -t stackrox/collector-builder:cache .

    - run:
        name: Save collector-builder cache image
        command: docker push stackrox/collector-builder:cache

  prepare-kernels:
    machine: true
    working_directory: ~/workspace
    environment:
    - BUILD_CONTAINER_TAG: stackrox/collector-builder:kobuilder-cache
    - BUILD_CONTAINER_CACHE_IMAGES: stackrox/collector-builder:kobuilder-cache
    - MODULE_BUCKET_BASE: gs://collector-modules/97f2d0644df7d292009b2dbdea0bb4860995fa064ba0e9f74b8e82cf3b4601eb
    - SOURCE_ROOT: /home/circleci/workspace/go/src/github.com/stackrox/collector

    steps:
    - attach_workspace:
        at: ~/workspace

    - run:
        name: Google Authenticate
        working_directory: ~/.config/gcloud
        command: |
          echo "$GOOGLE_CREDENTIALS_KERNEL_CACHE" > auth.json
          pip install -U crcmod google_compute_engine
          gcloud config set core/project stackrox-ci
          gcloud config set compute/region us-east1
          gcloud config set compute/zone us-east1-d
          gcloud auth activate-service-account --key-file auth.json
          gcloud auth list

    - run:
        name: Login to Docker Hub
        command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

    - run:
        name: Restore builder cache image(s)
        command: docker pull $BUILD_CONTAINER_CACHE_IMAGES || true

    - run:
        name: Build builder image
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/kernel-modules
        command: |
          make build-container
          docker tag "$BUILD_CONTAINER_TAG" build-kernel-modules

    - run:
        name: Upload builder cache image
        command: |
          [[ "$CIRCLE_BRANCH" == "master" ]] || exit 0
          docker push "$BUILD_CONTAINER_TAG"
        background: true

    - run:
        name: Prepare source
        command: |
          mkdir ~/versions-src
          docker run \
            -v "${SOURCE_ROOT}/sysdig/src:/sysdig-src:ro" \
            -v "${HOME}/versions-src:/output" \
            --tmpfs /scratch \
            --entrypoint prepare-src \
            build-kernel-modules
          versions=(~/versions-src/*)
          [[ "${#versions[@]}" == 1 ]]
          version="$(basename "${versions[0]}")"
          version="${version#.tgz}"
          mkdir ko-build
          echo "$version" >ko-build/primary-version

    - run:
        name: Generate list of existing modules
        working_directory: ~/workspace/ko-build
        command: |
          mkdir existing-modules
          mkdir build-tasks
          for i in ~/versions-src/*.tgz; do
            filename="$(basename "$i")"
            version="${filename%.tgz}"
            mkdir -p "build-tasks/${version}/source"
            tar -C "build-tasks/${version}/source" -xvzf "$i"
            ( gsutil -m ls -p stackrox-collector "${MODULE_BUCKET_BASE}/${VERSION}"/'*.ko'{,.gz} || true) \
              | sed -ne 's@^.*/collector-\([^/]+\)\.ko\(.gz\)$@\1@p' \
                >"build-tasks/${version}/existing-modules"
          done

    - run:
        name: Generate list of build steps
        working_directory: ~/workspace/ko-build/build-tasks
        command: |
          for i in *; do
            version="$(basename "$i")"
            docker run \
                -v "${SOURCE_ROOT}/sysdig/src:/sysdig-src:ro" \
                -v "${SOURCE_ROOT}/kernel-modules/supported-kernels/kernel-manifest.yml:/config/kernel-manifest.yml:ro" \
                -v "${PWD}/${version}/existing-versions:/config/existing-versions:ro" \
                build-kernel-modules \
                --config /config/kernel-manifest.yml \
                --existing-versions /config/existing-versions \
                --print-commands-only \
            | sed -e 's@^@SOURCE_VERSION="'"$version"'" @' >>all-tasks
          done

    - run:
        name: Save builder image
        working_directory: ~/workspace/docker-images
        command: |
          docker image save build-kernel-modules | gzip -c >build-kernel-modules.tgz

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build
          - docker-images

  kernels:
    machine: true
    parallelism: 8
    environment:
      - MODULE_BUCKET_BASE: gs://collector-modules/97f2d0644df7d292009b2dbdea0bb4860995fa064ba0e9f74b8e82cf3b4601eb
      - SOURCE_ROOT: /home/circleci/workspace/go/src/github.com/stackrox/collector

    steps:
    - attach_workspace:
        at: ~/workspace

    - run:
        name: Google Authenticate
        working_directory: ~/.config/gcloud
        command: |
          echo "$GOOGLE_CREDENTIALS_KERNEL_CACHE" > auth.json
          pip install -U crcmod google_compute_engine
          gcloud config set core/project stackrox-ci
          gcloud config set compute/region us-east1
          gcloud config set compute/zone us-east1-d
          gcloud auth activate-service-account --key-file auth.json
          gcloud auth list

    - run:
        name: Load builder image
        working_directory: ~/workspace/docker-images
        command: |
          docker image load < <(gunzip -c build-kernel-modules.tgz)

    - run:
        name: Download packages
        working_directory: ~/packages
        command: |
          PKG_CACHE_DIR="${PWD}" make -C "${SOURCE_ROOT}/kernel-modules" download-package-cache

    - run:
        name: Build shard
        working_directory: ~/workspace/ko-build
        command: |
          echo "Nodes total: $CIRCLE_NODE_TOTAL"
          echo "Node index:  $CIRCLE_NODE_INDEX"
          num_tasks=$(wc -l <build-tasks/all-tasks)
          shard_size=$((num_tasks / CIRCLE_NODE_TOTAL))
          split -d -l "$shard_size" build-tasks/all-tasks task-shard-

          OUTPUT_DIR="${HOME}/build-output"
          mkdir -p "$OUTPUT_DIR"
          ( echo 'set -e' ; cat task-shard-"$(printf '%02d\n' "$CIRCLE_NODE_INDEX")" ) \
            | docker run --rm -i \
                -v "${HOME}/packages:/packages:ro" \
                -v "${PWD}/build-tasks:/build-tasks:ro" \
                -v "${OUTPUT_DIR}:/output" \
                --tmpfs /scratch:exec \
                --entrypoint /bin/sh \
                build-kernel-modules \
                -
          ( cd "$OUTPUT_DIR" ; find . )

    - run:
        name: Upload modules to GCloud bucket
        working_directory: ~/build-output
        command: |
          gcloud config set project stackrox-collector
          gsutil -m rsync -r . "$MODULE_BUCKET_BASE"

  grpc:
    docker:
    - image: ubuntu:trusty
    working_directory: /go/src/github.com/stackrox/collector

    steps:
    - checkout

    - run:
        name: Install dependencies
        command: |
          apt-get update -y
          apt-get install -y build-essential ca-certificates

    - restore_cache:
        key: grpc-cpp-plugin-{{ checksum "build/scripts/install-grpc-cpp-plugin.sh" }}

    - run:
        name: Install dependencies
        command: |
          if [[ -x /tmp/grpc_cpp_plugin ]]; then
            echo "The cached grpc_cpp_plugin was found, skipping build."
            circleci step halt
          fi

    - run:
        name: Build grpc plugin
        working_directory: /go/src/github.com/stackrox/collector/collector
        command: make install-grpc

    - run:
        name: Prep grpc plugin
        command: cp -v /usr/local/bin/grpc_cpp_plugin /tmp/

    - save_cache:
        key: grpc-cpp-plugin-{{ checksum "build/scripts/install-grpc-cpp-plugin.sh" }}
        paths:
          - /tmp/grpc_cpp_plugin

  libsinsp:
    machine: true
    working_directory: ~/workspace
    environment:
    - GOPATH: /home/circleci/workspace/go

    steps:
    - attach_workspace:
        at: ~/workspace

    - run:
        name: Login to Docker Hub
        command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

    - run:
        name: Restore sysdig builder cache image
        command: docker pull stackrox/collector-builder:sysdig || true

    - run:
        name: Build libsinsp Wrapper
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/collector
        command: make container/libs/libsinsp-wrapper.so

    - run:
        name: Sanity check
        command: |
          ls -lh ~/workspace/go/src/github.com/stackrox/collector/collector/container/libs
          file   ~/workspace/go/src/github.com/stackrox/collector/collector/container/libs/libsinsp-wrapper.so
          docker images | grep collector

    - run:
        name: Save sysdig builder cache image
        command: docker push stackrox/collector-builder:sysdig

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector/collector/container/libs

  collector:
    machine: true
    environment:
    - GOPATH: /home/circleci/workspace/go

    working_directory: ~/workspace

    steps:
    - attach_workspace:
        at: ~/workspace

    - restore_cache:
        key: grpc-cpp-plugin-{{ checksum "/home/circleci/workspace/go/src/github.com/stackrox/collector/build/scripts/install-grpc-cpp-plugin.sh" }}

    - run:
        name: Prep grpc plugin
        command: sudo install /tmp/grpc_cpp_plugin /usr/local/bin/

    - run:
        name: Login to Docker Hub
        command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

    - run:
        name: Restore collector-builder cache image
        command: docker pull stackrox/collector-builder:cache

    - run:
        name: Sanity Check
        working_directory: ~/workspace/go/src/github.com/stackrox/collector
        command: |
          pwd
          echo '>>> Userspace lib:'
          ls -lh collector/container/libs
          file   collector/container/libs/libsinsp-wrapper.so
          echo '>>> Docker images:'
          docker images | grep collector
          echo '>>> gRPC plugin:'
          which grpc_cpp_plugin

    - run:
        name: Generate Protobuf Definitions
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/collector
        command: |
          PATH=$PATH:$HOME/workspace/go/bin
          make generated-srcs

    - run:
        name: Build collector
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/collector
        command: |
          mkdir -p container/bin
          docker run \
            -v $PWD:/src \
            -v $PWD/sysdig/src:/usr/local/sysdig \
            -v $PWD/container/libs/libsinsp-wrapper.so:/usr/local/lib/libsinsp-wrapper.so \
            -v $PWD/sysdig/src/driver/ppm_events_public.h:/usr/local/include/ppm_events_public.h \
            --name build stackrox/collector-builder:cache

    - run:
        name: Extract collector files
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/collector
        command: |
          cp cmake-build/collector container/bin/
          ls -lh container/bin/

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector/collector/container/bin

  images:
    machine: true
    environment:
    - GOPATH: /home/circleci/workspace/go
    - INSTALL_DIRECTORY: /tmp
    - MODULE_BUCKET_BASE: gs://collector-modules/97f2d0644df7d292009b2dbdea0bb4860995fa064ba0e9f74b8e82cf3b4601eb
    working_directory: ~/workspace

    steps:
    - attach_workspace:
        at: ~/workspace

    - run:
        name: Login to Docker Hub
        command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

    - run:
        name: Google Authenticate
        working_directory: ~/.config/gcloud
        command: |
          echo "$GOOGLE_CREDENTIALS_KERNEL_CACHE" > auth.json
          pip install -U crcmod google_compute_engine
          gcloud config set core/project stackrox-collector
          gcloud config set compute/region us-east1
          gcloud config set compute/zone us-east1-d
          gcloud auth activate-service-account --key-file auth.json
          gcloud auth list

    - run:
        name: Download kernel modules
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/kernel-modules/container/kernel-modules
        command: |
          modver="$(cat ~/workspace/ko-build/primary-version)"
          echo "$modver" >MODULE_VERSION.txt
          gsutil -m rsync -r "${MODULE_BUCKET_BASE}/${modver}" .
          done

    - run:
        name: Sanity check
        working_directory: ~/workspace/go/src/github.com/stackrox/collector
        command: |
          echo '>>> Collector Artifacts:'
          find collector/container
          echo '>>> Kernel Modules:'
          find kernel-modules/container

    - run:
        name: Build kernel-modules Docker image
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/kernel-modules/container
        command: |
          VERSION=$(git describe --tags)
          docker build \
            -t "stackrox/kernel-modules:$VERSION" \
            -t "stackrox/kernel-modules:snapshot-$VERSION" \
            .

    - run:
        name: Build collector Docker image
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/collector
        command: |
          VERSION=$(git describe --tags)
          cp NOTICE-collector.txt container/
          cp COPYING.txt container/
          docker build \
            -t stackrox/collector:snapshot-$VERSION \
            -t stackrox/collector:$VERSION \
            --build-arg base="$VERSION" \
            container

    - run:
        name: Sanity check images
        command: |
          docker images | grep kernel
          docker images | grep collector

    - run:
        name: Push images
        working_directory: /go/src/github.com/stackrox/collector
        command: |
          VERSION=$(git describe --tags)
          if [[ $CIRCLE_BRANCH = master || -n $CIRCLE_TAG ]]; then
            echo Pushing release images
            docker push stackrox/collector:$VERSION
            echo "Pushing kernel modules"
            docker push "stackrox/kernel-modules:$VERSION"
          else
            echo Pushing snapshot images
            docker push stackrox/collector:snapshot-$VERSION
            echo "Pushing kernel modules"
            docker push "stackrox/kernel-modules:snapshot-$VERSION"
          fi

    - run:
        name: Integration tests
        working_directory: ~/workspace/go/src/github.com/stackrox/collector/collector
        command: |
          go get -u github.com/jstemmer/go-junit-report
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          sudo mv /tmp/dep /usr/local/bin/dep
          export COLLECTOR_TAG=$(git describe --tags)
          sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          make integration-tests integration-test-report

workflows:
  version: 2
  build:
    jobs:
    - init:
        filters:
          tags:
            only: /.*/
    - builder:
        filters:
          tags:
            only: /.*/
        requires:
        - init
    - grpc:
        filters:
          tags:
            only: /.*/
    - libsinsp:
        filters:
          tags:
            only: /.*/
        requires:
        - init
    - collector:
        filters:
          tags:
            only: /.*/
        requires:
        - builder
        - grpc
        - libsinsp
    - prepare-kernels:
        filters:
          tags:
            only: /.*/
        requires:
        - init
    - kernels:
        filters:
          tags:
            only: /.*/
        requires:
        - prepare-kernels
    - images:
        filters:
          tags:
            only: /.*/
        requires:
        - collector
        - kernels
